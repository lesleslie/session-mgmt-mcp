[build-system]
build-backend = "hatchling.build"
requires = [
    "hatchling",
]

[project]
name = "session-mgmt-mcp"
version = "0.1.0"
description = "Claude Session Management MCP Server - comprehensive session management functionality for Claude Code"
readme = "README.md"
keywords = [
    "ai",
    "assistant",
    "claude",
    "mcp",
    "session-management",
]
license = "MIT"
authors = [
    { name = "Les Leslie", email = "les@wedgwoodwebworks.com" },
]
requires-python = ">=3.13"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: System Shells",
    "Topic :: Utilities",
]
dependencies = [
    "crackerjack",
    "duckdb>=0.9",
    "fastmcp>=2",
    "numpy>=1.24",
    "tiktoken>=0.5",
]

[project.optional-dependencies]
dev = [
    "coverage>=7",
    "hypothesis>=6.70",
    "psutil>=5.9",
    "pytest>=7",
    "pytest-asyncio>=0.21",
    "pytest-benchmark>=4",
    "pytest-cov>=4",
    "pytest-mock>=3.10",
    "pytest-timeout>=2.1",
    "pytest-xdist>=3",
]
embeddings = [
    "onnxruntime",
    "transformers",
]

[project.urls]
Homepage = "https://github.com/lesleslie/session-mgmt-mcp"
Issues = "https://github.com/lesleslie/session-mgmt-mcp/issues"
Repository = "https://github.com/lesleslie/session-mgmt-mcp"

[project.scripts]
session-mgmt-mcp = "session_mgmt_mcp.server:main"

[dependency-groups]
dev = [
    "crackerjack",
    "fastmcp>=2.11.3",
    "hypothesis>=6.138.7",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
]

[tool.ruff]
target-version = "py313"
line-length = 88
fix = true
unsafe-fixes = true
show-fixes = true
output-format = "full"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
extend-select = [
    "C901",
    "F",
    "I",
    "UP",
]
ignore = [
    "E402",
    "F821",
]
fixable = [
    "ALL",
]
unfixable = []

[tool.ruff.lint.isort]
no-lines-before = [
    "first-party",
]

[tool.ruff.lint.mccabe]
max-complexity = 13

[tool.codespell]
skip = "*/data/*"
quiet-level = 3
ignore-words-list = "crate,uptodate,nd,nin"

[tool.pyproject-fmt]
column_width = 120
indent = 4

[tool.pytest.ini_options]
asyncio_mode = "auto"
timeout = 300
addopts = "--cov=session_mgmt_mcp --cov-report=term --cov-fail-under=42"
markers = [
    "unit: marks test as a unit test",
    "benchmark: mark test as a benchmark",
    "integration: marks test as an integration test",
    "no_leaks: detect asyncio task leaks",
]
asyncio_default_fixture_loop_scope = "function"
python_files = [
    "test_*.py",
    "*_test.py",
]
testpaths = [
    "tests",
    "session_mgmt_mcp",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
timeout_method = "thread"
filterwarnings = [
    "ignore::pytest_benchmark.logger.PytestBenchmarkWarning",
]

[tool.pytest.benchmark]
disable_gc = true
warmup = false
warmup_iterations = 0
min_rounds = 1
max_time = 5.0

[tool.coverage.run]
branch = false
source = [
    "session_mgmt_mcp",
]
data_file = ".coverage"
parallel = false
omit = [
    "*/tests/*",
    "*/site-packages/*",
    "*/__pycache__/*",
    "*/__init__.py",
    "*/_version.py",
    "*/conftest.py",
    "*/test_*.py",
    "*/_test.py",
]

[tool.coverage.report]
exclude_also = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "except ImportError",
    "def __str__",
    "@abstractmethod",
]
ignore_errors = false

[tool.pyright]
verboseOutput = true
include = [
    "tests",
    "session_mgmt_mcp",
]
exclude = [
    "build",
    "tests/*",
    "crackerjack/plugins/*",
    ".venv",
    "scratch",
    "crackerjack/mcp/*",
    "examples/*",
    "dist",
]
extraPaths = [
    ".venv/lib/python3.13/site-packages/",
]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportOptionalMemberAccess = "warning"
reportOptionalCall = "warning"
reportUnknownMemberType = "warning"
reportUnknownVariableType = false
reportUnknownArgumentType = "warning"
reportInvalidTypeForm = "warning"
reportUnknownLambdaType = "warning"
reportUnknownParameterType = "warning"
reportPrivateUsage = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportUnnecessaryComparison = "warning"
reportConstantRedefinition = "warning"
pythonVersion = "3.13"

[tool.bandit]
target = [
    "tests",
    "session_mgmt_mcp",
]
skips = [
    "B112",
    "B404",
    "B603",
    "B101",
    "B110",
    "B607",
]
exclude_dirs = [
    "tests/data",
]

[tool.vulture]
min_confidence = 86
paths = [
    "session_mgmt_mcp",
]
ignore_names = [
    "cls",
]

[tool.refurb]
enable_all = true
quiet = true
python_version = "3.13"

[tool.complexipy]
default_pattern = "**/*.py"
exclude_patterns = [
    "**/tests/**",
    "**/test_*.py",
]
max_complexity = 15

[tool.creosote]
paths = [
    "session_mgmt_mcp",
]
deps-file = "pyproject.toml"
exclude-deps = [
    "websockets",
    "pydantic-settings",
    "bandit",
    "uvicorn",
    "pyright",
    "pytest",
    "watchdog",
    "pytest-xdist",
    "autotyping",
    "pre-commit",
    "fastmcp",
    "ruff",
    "vulture",
    "refurb",
    "hatchling",
    "codespell",
    "pytest-cov",
    "pytest-benchmark",
    "pytest-timeout",
    "creosote",
    "google-crc32c",
    "complexipy",
    "pytest-mock",
    "keyring",
    "fastapi",
    "uv",
    "pyfiglet",
    "pyyaml",
    "pyleak",
    "tomli-w",
    "pytest-asyncio",
    "inflection",
]

[tool.uv]
keyring-provider = "subprocess"
publish-url = "https://upload.pypi.org/legacy/"
check-url = "https://pypi.org/simple/"

[tool.uv.sources.crackerjack]
path = "../crackerjack"
editable = true

[tool.autotyping]
exclude = [
    "tests/data/*",
    "*/conftest.py",
]
safe = true
aggressive = true
