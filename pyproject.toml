[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[project]
name = "session-mgmt-mcp"
version = "0.1.0"
description = "MCP server for Claude session management and conversation memory"
readme = "README.md"
keywords = [
    "anthropic",
    "claude",
    "mcp",
    "session-management",
    "conversation-memory",
    "reflection",
    "ai-tools",
]
authors = [
    { name = "Les Leslie", email = "les@wedgwoodwebworks.com" },
]
requires-python = ">=3.13"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: System Shells",
    "Topic :: Utilities",
]
dependencies = [
    "crackerjack",
    "duckdb>=0.9",
    "fastmcp>=2",
    "numpy>=1.24",
    "tiktoken>=0.5",
]

[project.license]
file = "LICENSE"

[project.optional-dependencies]
dev = [
    "coverage>=7",
    "hypothesis>=6.70",
    "psutil>=5.9",
    "pytest>=7",
    "pytest-asyncio>=0.21",
    "pytest-benchmark>=4",
    "pytest-cov>=4",
    "pytest-mock>=3.10",
    "pytest-timeout>=2.1",
    "pytest-xdist>=3",
]
embeddings = [
    "numpy>=1.24",
    "onnxruntime>=1.15",
    "transformers>=4.21",
]

[project.scripts]
session-mgmt-mcp = "session_mgmt_mcp.server:main"

[project.urls]
Homepage = "https://github.com/lesleslie/session-mgmt-mcp"
Repository = "https://github.com/lesleslie/session-mgmt-mcp"
Issues = "https://github.com/lesleslie/session-mgmt-mcp/issues"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=session_mgmt_mcp",
    "--cov-report=term",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    "--cov-fail-under=42",
    "--timeout=300",
]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:pkg_resources.*",
    "ignore::PendingDeprecationWarning",
    "ignore::pytest.PytestUnknownMarkWarning:pytest_benchmark.*",
]

[tool.coverage.run]
source = [
    "session_mgmt_mcp",
]
omit = [
    "session_mgmt_mcp/__main__.py",
    "tests/*",
    ".venv/*",
    "build/*",
    "dist/*",
]
branch = true

[tool.coverage.report]
fail_under = 42
show_missing = true
skip_covered = false
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "ALL",
]
ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "ANN101",
    "ANN102",
    "ANN401",
    "S101",
    "PTH123",
    "T201",
    "T203",
    "FIX002",
    "TD002",
    "TD003",
    "ERA001",
    "PLR0913",
    "PLR0912",
    "PLR0915",
    "PLR2004",
    "C901",
    "PLE1205",
    "G004",
    "SIM117",
    "B008",
    "UP007",
]

[tool.ruff.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S101",
    "PLR2004",
    "ANN201",
    "ANN001",
    "D103",
]

[tool.pyright]
include = [
    "session_mgmt_mcp",
]
exclude = [
    "**/__pycache__",
    "**/node_modules",
    ".venv",
    ".git",
    "build",
    "dist",
]
ignore = [
    "**/tests",
]
reportMissingImports = true
reportMissingTypeStubs = false
reportGeneralTypeIssues = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportUntypedFunctionDecorator = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
pythonVersion = "3.13"
pythonPlatform = "All"

[tool.pyright.defineConstant]
DEBUG = true

[tool.complexipy]
max-complexity = 13

[tool.bandit]
exclude_dirs = [
    "tests",
    ".venv",
    "build",
    "dist",
]
skips = [
    "B101",
]

[tool.vulture]
exclude = [
    "tests/",
    ".venv/",
    "build/",
    "dist/",
]
ignore_names = [
    "_*",
    "test_*",
]
make_whitelist = true
min_confidence = 80
paths = [
    "session_mgmt_mcp",
]
sort_by_size = true

[tool.refurb]
ignore = [
    "FURB101",
    "FURB103",
    "FURB105",
    "FURB106",
    "FURB113",
    "FURB118",
    "FURB140",
]

[tool.creosote]
sections = [
    "dependencies",
]
paths = [
    "session_mgmt_mcp",
]
deps-file = "pyproject.toml"
